generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique @db.VarChar(100)
  name         String
  tipo_usuario String   // Tipo de relacionamento por string
  senha        String   @db.VarChar(100)
  TipoUsuario  TipoUsuario @relation("user_tipo_usuario", fields: [tipo_usuario], references: [type]) // Relacionamento via 'type'
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt @default(now())

  @@map("user")
}

model TipoUsuario {
  id         Int      @id @default(autoincrement()) // Chave primária como inteiro
  type       String   @db.VarChar(30) @unique              // 'type' para a relação
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @default(now())
  User       User[]   @relation("user_tipo_usuario") // Relacionamento com base no 'type'

  @@map("tipo_usuario")

}
model TipoCategoria {
  id             Int       @id @default(autoincrement()) // Chave primária com auto incremento
  tipo_categoria String    @db.VarChar(30) @unique // Nome da categoria (ex: "Telemovél")
  imagem         String?    @db.VarChar(255)
  created_at     DateTime  @default(now()) @db.Timestamp(6) // Data de criação
  updated_at     DateTime  @updatedAt @default(now())// Data de atualização automática
  produtos       Produto[] @relation("Produtos_TipoCategoria") // Relacionamento com Produto, sem fields e references

  @@map("tipo_categoria") // Nome da tabela no banco de dados
}

model Produto {
  id               Int           @id @default(autoincrement()) // Chave primária com auto incremento
  nome_produto     String        @db.VarChar(100) // Nome do produto
  descricao        String?       // Descrição do produto (opcional)
  preco            Float         // Preço do produto
  quantidade       Int           // Quantidade disponível
  tipoCategoriaId  Int           // Referência ao ID de tipoCategoria (chave estrangeira)
  tipo_categoria   TipoCategoria @relation("Produtos_TipoCategoria", fields: [tipoCategoriaId], references: [id]) // Relacionamento com TipoCategoria
  detalhes         String        @db.VarChar(400)
  imagem           String?       @db.VarChar(255)
  data_cadastro    DateTime      @default(now()) // Data de cadastro do produto
  created_at       DateTime      @default(now()) // Data de criação
  updated_at       DateTime      @updatedAt // Data de atualização automática

  @@map("produto") // Nome da tabela no banco de dados
}
model Pedido {
  id          Int      @id @default(autoincrement())
  data_Pedido DateTime @default(now())
  id_usuario  Int
  status      String
  valor_total Float
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("pedido")
}



model Item {
  id             Int      @id @default(autoincrement())
  id_produto     Int
  id_pedido      Int
  quantidade     Int
  preco_unitario Float
  subtotal       Float
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@map("item")
}

model ItemPagamento {
  id             Int      @id @default(autoincrement())
  id_item        Int
  id_pedido      Int
  quantidade     Int
  preco_unitario Float
  subtotal       Float
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@map("item_pagamento")
}

model Pagamento {
  id               Int      @id @default(autoincrement())
  id_pedido        Int
  valor_pago       Decimal
  metodo_pagamento String
  data_pagamento   DateTime @default(now())
  status_pagamento String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  @@map("pagamento")
}

model Endereco {
  id         Int      @id @default(autoincrement())
  id_usuario Int
  cidade     String
  provincia  String
  pais       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("endereco")
}

model Avaliacao {
  id             Int      @id @default(autoincrement())
  id_produto     Int
  id_usuario     Int
  nota           Int
  comentario     String?
  data_avaliacao DateTime @default(now())
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@map("avaliacao")
}

model Carrinho {
  id               Int      @id @default(autoincrement())
  id_usuario       Int
  data_criacao     DateTime @default(now())
  data_atualizacao DateTime @updatedAt
  status           String
  imagem           String? @db.VarChar(255)
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  @@map("carrinho")
}
